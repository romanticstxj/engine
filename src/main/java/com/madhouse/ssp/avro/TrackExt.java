/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.madhouse.ssp.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TrackExt extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7037719007519071428L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TrackExt\",\"namespace\":\"com.madhouse.ssp.avro\",\"fields\":[{\"name\":\"args\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"dspid\",\"type\":\"long\"},{\"name\":\"income\",\"type\":\"int\"},{\"name\":\"cost\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TrackExt> ENCODER =
      new BinaryMessageEncoder<TrackExt>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TrackExt> DECODER =
      new BinaryMessageDecoder<TrackExt>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TrackExt> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TrackExt> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TrackExt>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TrackExt to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TrackExt from a ByteBuffer. */
  public static TrackExt fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence args;
  @Deprecated public long dspid;
  @Deprecated public int income;
  @Deprecated public int cost;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TrackExt() {}

  /**
   * All-args constructor.
   * @param args The new value for args
   * @param dspid The new value for dspid
   * @param income The new value for income
   * @param cost The new value for cost
   */
  public TrackExt(java.lang.CharSequence args, java.lang.Long dspid, java.lang.Integer income, java.lang.Integer cost) {
    this.args = args;
    this.dspid = dspid;
    this.income = income;
    this.cost = cost;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return args;
    case 1: return dspid;
    case 2: return income;
    case 3: return cost;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: args = (java.lang.CharSequence)value$; break;
    case 1: dspid = (java.lang.Long)value$; break;
    case 2: income = (java.lang.Integer)value$; break;
    case 3: cost = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'args' field.
   * @return The value of the 'args' field.
   */
  public java.lang.CharSequence getArgs() {
    return args;
  }

  /**
   * Sets the value of the 'args' field.
   * @param value the value to set.
   */
  public void setArgs(java.lang.CharSequence value) {
    this.args = value;
  }

  /**
   * Gets the value of the 'dspid' field.
   * @return The value of the 'dspid' field.
   */
  public java.lang.Long getDspid() {
    return dspid;
  }

  /**
   * Sets the value of the 'dspid' field.
   * @param value the value to set.
   */
  public void setDspid(java.lang.Long value) {
    this.dspid = value;
  }

  /**
   * Gets the value of the 'income' field.
   * @return The value of the 'income' field.
   */
  public java.lang.Integer getIncome() {
    return income;
  }

  /**
   * Sets the value of the 'income' field.
   * @param value the value to set.
   */
  public void setIncome(java.lang.Integer value) {
    this.income = value;
  }

  /**
   * Gets the value of the 'cost' field.
   * @return The value of the 'cost' field.
   */
  public java.lang.Integer getCost() {
    return cost;
  }

  /**
   * Sets the value of the 'cost' field.
   * @param value the value to set.
   */
  public void setCost(java.lang.Integer value) {
    this.cost = value;
  }

  /**
   * Creates a new TrackExt RecordBuilder.
   * @return A new TrackExt RecordBuilder
   */
  public static com.madhouse.ssp.avro.TrackExt.Builder newBuilder() {
    return new com.madhouse.ssp.avro.TrackExt.Builder();
  }

  /**
   * Creates a new TrackExt RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TrackExt RecordBuilder
   */
  public static com.madhouse.ssp.avro.TrackExt.Builder newBuilder(com.madhouse.ssp.avro.TrackExt.Builder other) {
    return new com.madhouse.ssp.avro.TrackExt.Builder(other);
  }

  /**
   * Creates a new TrackExt RecordBuilder by copying an existing TrackExt instance.
   * @param other The existing instance to copy.
   * @return A new TrackExt RecordBuilder
   */
  public static com.madhouse.ssp.avro.TrackExt.Builder newBuilder(com.madhouse.ssp.avro.TrackExt other) {
    return new com.madhouse.ssp.avro.TrackExt.Builder(other);
  }

  /**
   * RecordBuilder for TrackExt instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TrackExt>
    implements org.apache.avro.data.RecordBuilder<TrackExt> {

    private java.lang.CharSequence args;
    private long dspid;
    private int income;
    private int cost;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.madhouse.ssp.avro.TrackExt.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.args)) {
        this.args = data().deepCopy(fields()[0].schema(), other.args);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dspid)) {
        this.dspid = data().deepCopy(fields()[1].schema(), other.dspid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.income)) {
        this.income = data().deepCopy(fields()[2].schema(), other.income);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cost)) {
        this.cost = data().deepCopy(fields()[3].schema(), other.cost);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TrackExt instance
     * @param other The existing instance to copy.
     */
    private Builder(com.madhouse.ssp.avro.TrackExt other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.args)) {
        this.args = data().deepCopy(fields()[0].schema(), other.args);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dspid)) {
        this.dspid = data().deepCopy(fields()[1].schema(), other.dspid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.income)) {
        this.income = data().deepCopy(fields()[2].schema(), other.income);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cost)) {
        this.cost = data().deepCopy(fields()[3].schema(), other.cost);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'args' field.
      * @return The value.
      */
    public java.lang.CharSequence getArgs() {
      return args;
    }

    /**
      * Sets the value of the 'args' field.
      * @param value The value of 'args'.
      * @return This builder.
      */
    public com.madhouse.ssp.avro.TrackExt.Builder setArgs(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.args = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'args' field has been set.
      * @return True if the 'args' field has been set, false otherwise.
      */
    public boolean hasArgs() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'args' field.
      * @return This builder.
      */
    public com.madhouse.ssp.avro.TrackExt.Builder clearArgs() {
      args = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dspid' field.
      * @return The value.
      */
    public java.lang.Long getDspid() {
      return dspid;
    }

    /**
      * Sets the value of the 'dspid' field.
      * @param value The value of 'dspid'.
      * @return This builder.
      */
    public com.madhouse.ssp.avro.TrackExt.Builder setDspid(long value) {
      validate(fields()[1], value);
      this.dspid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dspid' field has been set.
      * @return True if the 'dspid' field has been set, false otherwise.
      */
    public boolean hasDspid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dspid' field.
      * @return This builder.
      */
    public com.madhouse.ssp.avro.TrackExt.Builder clearDspid() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'income' field.
      * @return The value.
      */
    public java.lang.Integer getIncome() {
      return income;
    }

    /**
      * Sets the value of the 'income' field.
      * @param value The value of 'income'.
      * @return This builder.
      */
    public com.madhouse.ssp.avro.TrackExt.Builder setIncome(int value) {
      validate(fields()[2], value);
      this.income = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'income' field has been set.
      * @return True if the 'income' field has been set, false otherwise.
      */
    public boolean hasIncome() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'income' field.
      * @return This builder.
      */
    public com.madhouse.ssp.avro.TrackExt.Builder clearIncome() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'cost' field.
      * @return The value.
      */
    public java.lang.Integer getCost() {
      return cost;
    }

    /**
      * Sets the value of the 'cost' field.
      * @param value The value of 'cost'.
      * @return This builder.
      */
    public com.madhouse.ssp.avro.TrackExt.Builder setCost(int value) {
      validate(fields()[3], value);
      this.cost = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'cost' field has been set.
      * @return True if the 'cost' field has been set, false otherwise.
      */
    public boolean hasCost() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'cost' field.
      * @return This builder.
      */
    public com.madhouse.ssp.avro.TrackExt.Builder clearCost() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TrackExt build() {
      try {
        TrackExt record = new TrackExt();
        record.args = fieldSetFlags()[0] ? this.args : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.dspid = fieldSetFlags()[1] ? this.dspid : (java.lang.Long) defaultValue(fields()[1]);
        record.income = fieldSetFlags()[2] ? this.income : (java.lang.Integer) defaultValue(fields()[2]);
        record.cost = fieldSetFlags()[3] ? this.cost : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TrackExt>
    WRITER$ = (org.apache.avro.io.DatumWriter<TrackExt>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TrackExt>
    READER$ = (org.apache.avro.io.DatumReader<TrackExt>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
